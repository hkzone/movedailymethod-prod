/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CoursesSection = {
  _id: string;
  _type: "coursesSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  header?: {
    tagline?: string;
    title?: string;
    description?: string;
  };
  sectionLabel?: string;
  buttonText?: string;
  buttonLink?: string;
};

export type Header = {
  _id: string;
  _type: "header";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  logoSvg?: string;
  logoLink?: string;
  navigationItems?: Array<{
    label?: string;
    link?: string;
    _key: string;
  }>;
  isActive?: boolean;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  logoSvg?: string;
  logoLink?: string;
  navigationItems?: Array<{
    label?: string;
    link?: string;
    _key: string;
  }>;
  socialLinks?: Array<{
    platform?: "instagram" | "facebook" | "youtube" | "telegram" | "discord" | "twitter";
    url?: string;
    _key: string;
  }>;
  copyrightText?: string;
  isActive?: boolean;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  contactButtonText?: string;
  contactButtonLink?: string;
  questions?: Array<{
    question?: string;
    answer?: string;
    _key: string;
  }>;
  isActive?: boolean;
};

export type TransformationGallery = {
  _id: string;
  _type: "transformationGallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  tagline?: string;
  title?: string;
  subtitle?: string;
  ctaButton?: {
    text?: string;
    link?: string;
  };
  transformations?: Array<{
    name?: string;
    age?: number;
    duration?: string;
    weightLoss?: number;
    weightUnit?: "lbs" | "kg";
    testimonial?: string;
    beforeImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    afterImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    rating?: number;
    _key: string;
  }>;
  isActive?: boolean;
};

export type Cta = {
  _id: string;
  _type: "cta";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  title?: string;
  description?: string;
  primaryButton?: {
    text?: string;
    link?: string;
  };
  secondaryButton?: {
    text?: string;
    link?: string;
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  isActive?: boolean;
};

export type Testimonials = {
  _id: string;
  _type: "testimonials";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  quote?: string;
  author?: {
    name?: string;
    role?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  };
  rating?: number;
  isActive?: boolean;
};

export type Stats = {
  _id: string;
  _type: "stats";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  title?: string;
  description?: string;
  stats?: Array<{
    value?: string;
    label?: string;
    _key: string;
  }>;
  isActive?: boolean;
};

export type Benefits = {
  _id: string;
  _type: "benefits";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  tagline?: string;
  title?: string;
  description?: string;
  primaryButton?: {
    text?: string;
    link?: string;
  };
  secondaryButton?: {
    text?: string;
    link?: string;
    showIcon?: boolean;
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  isActive?: boolean;
};

export type Features = {
  _id: string;
  _type: "features";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  header?: {
    tagline?: string;
    title?: string;
    description?: string;
  };
  leftColumn?: {
    mainSection?: {
      tagline?: string;
      title?: string;
      description?: string;
      primaryButtonText?: string;
      primaryButtonLink?: string;
      secondaryButtonText?: string;
      secondaryButtonLink?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
    featureBoxes?: Array<{
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      title?: string;
      description?: string;
      buttonText?: string;
      buttonLink?: string;
      _key: string;
    }>;
  };
  rightColumn?: {
    imageSection?: {
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      tagline?: string;
      title?: string;
      description?: string;
      buttonText?: string;
      buttonLink?: string;
    };
    programsSection?: {
      tagline?: string;
      title?: string;
      description?: string;
      primaryButtonText?: string;
      primaryButtonLink?: string;
      secondaryButtonText?: string;
      secondaryButtonLink?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
  };
  isActive?: boolean;
};

export type Hero = {
  _id: string;
  _type: "hero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  title?: string;
  subtitle?: string;
  primaryButton?: {
    text?: string;
    link?: string;
  };
  secondaryButton?: {
    text?: string;
    link?: string;
    showIcon?: boolean;
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  isActive?: boolean;
  contentAlignment?: "left" | "right";
};

export type LessonCompletion = {
  _id: string;
  _type: "lessonCompletion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  student?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "student";
  };
  lesson?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  };
  module?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "module";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  completedAt?: string;
};

export type Enrollment = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  student?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "student";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  amount?: number;
  paymentProvider?: "none" | "stripe" | "wayforpay";
  paymentId?: string;
  enrolledAt?: string;
};

export type Student = {
  _id: string;
  _type: "student";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  clerkId?: string;
  imageUrl?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Lesson = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  videoUrl?: string;
  loomUrl?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  materials?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    title?: string;
    _type: "file";
    _key: string;
  }>;
};

export type Module = {
  _id: string;
  _type: "module";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  lessons?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "lesson";
  }>;
};

export type Course = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  price?: number;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  modules?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "module";
  }>;
  instructor?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "instructor";
  };
  courseMaterials?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    title?: string;
    _type: "file";
    _key: string;
  }>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Instructor = {
  _id: string;
  _type: "instructor";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  bio?: string;
  photo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  icon?: string;
  color?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | CoursesSection | Header | Footer | Faq | TransformationGallery | Cta | Testimonials | Stats | Benefits | Features | Hero | LessonCompletion | Enrollment | Student | BlockContent | Lesson | Module | Course | SanityFileAsset | Instructor | Category | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/courses/getCourseById.ts
// Variable: getCourseByIdQuery
// Query: *[_type == "course" && _id == $id][0] {      ...,  // Spread all course fields      "category": category->{...},  // Expand the category reference, including all its fields      "instructor": instructor->{...},  // Expand the instructor reference, including all its fields      "modules": modules[]-> {  // Expand the array of module references        ...,  // Include all module fields        "lessons": lessons[]-> {          ...,          materials[]{ // Also fetch lesson materials if needed for course overview in dashboard            _key,            title,            "asset": asset->{url, originalFilename, size, extension, mimeType}          }        }      },      courseMaterials[]{ // Fetch course-level materials        _key,        title,        "asset": asset->{url, originalFilename, size, extension, mimeType}      }    }
export type GetCourseByIdQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  price?: number;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    description?: string;
    icon?: string;
    color?: string;
  } | null;
  modules: Array<{
    _id: string;
    _type: "module";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    lessons: Array<{
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      videoUrl?: string;
      loomUrl?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      materials: Array<{
        _key: string;
        title: string | null;
        asset: {
          url: string | null;
          originalFilename: string | null;
          size: number | null;
          extension: string | null;
          mimeType: string | null;
        } | null;
      }> | null;
    }> | null;
  }> | null;
  instructor: {
    _id: string;
    _type: "instructor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    bio?: string;
    photo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  courseMaterials: Array<{
    _key: string;
    title: string | null;
    asset: {
      url: string | null;
      originalFilename: string | null;
      size: number | null;
      extension: string | null;
      mimeType: string | null;
    } | null;
  }> | null;
} | null;

// Source: sanity/lib/courses/getCourseBySlug.ts
// Variable: getCourseBySlugQuery
// Query: *[_type == "course" && slug.current == $slug][0] {      ...,      "category": category->{...},      "instructor": instructor->{...},      "modules": modules[]-> {        ...,        "lessons": lessons[]-> {...}      }    }
export type GetCourseBySlugQueryResult = {
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  price?: number;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    description?: string;
    icon?: string;
    color?: string;
  } | null;
  modules: Array<{
    _id: string;
    _type: "module";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    lessons: Array<{
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      videoUrl?: string;
      loomUrl?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      materials?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        title?: string;
        _type: "file";
        _key: string;
      }>;
    }> | null;
  }> | null;
  instructor: {
    _id: string;
    _type: "instructor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    bio?: string;
    photo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  courseMaterials?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    title?: string;
    _type: "file";
    _key: string;
  }>;
} | null;

// Source: sanity/lib/courses/getCourses.ts
// Variable: getCoursesQuery
// Query: *[_type == "course"] {    ...,    "slug": slug.current,    "category": category->{...},    "instructor": instructor->{...}  }
export type GetCoursesQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  price?: number;
  slug: string | null;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    description?: string;
    icon?: string;
    color?: string;
  } | null;
  modules?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "module";
  }>;
  instructor: {
    _id: string;
    _type: "instructor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    bio?: string;
    photo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  courseMaterials?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    title?: string;
    _type: "file";
    _key: string;
  }>;
}>;

// Source: sanity/lib/courses/getCoursesSection.ts
// Variable: coursesSectionQuery
// Query: *[_type == "coursesSection"][0] {    id,    header,    buttonText,    buttonLink  }
export type CoursesSectionQueryResult = {
  id: string | null;
  header: {
    tagline?: string;
    title?: string;
    description?: string;
  } | null;
  buttonText: string | null;
  buttonLink: string | null;
} | null;

// Source: sanity/lib/courses/searchCourses.ts
// Variable: searchQuery
// Query: *[_type == "course" && (    title match $term + "*" ||    description match $term + "*" ||    category->name match $term + "*"  )] {    ...,    "slug": slug.current,    "category": category->{...},    "instructor": instructor->{...}  }
export type SearchQueryResult = Array<{
  _id: string;
  _type: "course";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  price?: number;
  slug: string | null;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  category: {
    _id: string;
    _type: "category";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    description?: string;
    icon?: string;
    color?: string;
  } | null;
  modules?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "module";
  }>;
  instructor: {
    _id: string;
    _type: "instructor";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    bio?: string;
    photo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  courseMaterials?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    title?: string;
    _type: "file";
    _key: string;
  }>;
}>;

// Source: sanity/lib/lessons/getCourseProgress.ts
// Variable: progressQuery
// Query: {    "completedLessons": *[_type == "lessonCompletion" && student._ref == $studentId && course._ref == $courseId] {      ...,      "lesson": lesson->{...},      "module": module->{...}    },    "course": *[_type == "course" && _id == $courseId][0] {      ...,      "modules": modules[]-> {        ...,        "lessons": lessons[]-> {...}      }    }  }
export type ProgressQueryResult = {
  completedLessons: Array<{
    _id: string;
    _type: "lessonCompletion";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    student?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "student";
    };
    lesson: {
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      videoUrl?: string;
      loomUrl?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      materials?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        title?: string;
        _type: "file";
        _key: string;
      }>;
    } | null;
    module: {
      _id: string;
      _type: "module";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      lessons?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "lesson";
      }>;
    } | null;
    course?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "course";
    };
    completedAt?: string;
  }>;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    price?: number;
    slug?: Slug;
    description?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    category?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    modules: Array<{
      _id: string;
      _type: "module";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      lessons: Array<{
        _id: string;
        _type: "lesson";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title?: string;
        slug?: Slug;
        description?: string;
        videoUrl?: string;
        loomUrl?: string;
        content?: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }>;
        materials?: Array<{
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          title?: string;
          _type: "file";
          _key: string;
        }>;
      }> | null;
    }> | null;
    instructor?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "instructor";
    };
    courseMaterials?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      title?: string;
      _type: "file";
      _key: string;
    }>;
  } | null;
};

// Source: sanity/lib/lessons/getLessonById.ts
// Variable: getLessonByIdQuery
// Query: *[_type == "lesson" && _id == $id][0] {    ...,    "module": module->{      ...,      "course": course->{...}    },    materials[]{ // Fetch the materials array      _key,      title,       "asset": asset->{ // Access fields from the referenced asset        url,        originalFilename,        size,        extension,        mimeType      }    }  }
export type GetLessonByIdQueryResult = {
  _id: string;
  _type: "lesson";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  videoUrl?: string;
  loomUrl?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  materials: Array<{
    _key: string;
    title: string | null;
    asset: {
      url: string | null;
      originalFilename: string | null;
      size: number | null;
      extension: string | null;
      mimeType: string | null;
    } | null;
  }> | null;
  module: null;
} | null;

// Source: sanity/lib/lessons/getLessonCompletionStatus.ts
// Variable: completionStatusQuery
// Query: *[_type == "lessonCompletion" && student._ref == $studentId && lesson._ref == $lessonId][0] {    ...  }
export type CompletionStatusQueryResult = {
  _id: string;
  _type: "lessonCompletion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  student?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "student";
  };
  lesson?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "lesson";
  };
  module?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "module";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  completedAt?: string;
} | null;

// Source: sanity/lib/lessons/getLessonCompletions.ts
// Variable: getCompletionsQuery
// Query: {    "completedLessons": *[_type == "lessonCompletion" && student._ref == $studentId && course._ref == $courseId] {      ...,      "lesson": lesson->{...},      "module": module->{...}    },    "course": *[_type == "course" && _id == $courseId][0] {      ...,      "modules": modules[]-> {        ...,        "lessons": lessons[]-> {...}      }    }  }
export type GetCompletionsQueryResult = {
  completedLessons: Array<{
    _id: string;
    _type: "lessonCompletion";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    student?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "student";
    };
    lesson: {
      _id: string;
      _type: "lesson";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      slug?: Slug;
      description?: string;
      videoUrl?: string;
      loomUrl?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      materials?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        title?: string;
        _type: "file";
        _key: string;
      }>;
    } | null;
    module: {
      _id: string;
      _type: "module";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      lessons?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "lesson";
      }>;
    } | null;
    course?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "course";
    };
    completedAt?: string;
  }>;
  course: {
    _id: string;
    _type: "course";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    price?: number;
    slug?: Slug;
    description?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    category?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "category";
    };
    modules: Array<{
      _id: string;
      _type: "module";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      lessons: Array<{
        _id: string;
        _type: "lesson";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        title?: string;
        slug?: Slug;
        description?: string;
        videoUrl?: string;
        loomUrl?: string;
        content?: Array<{
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
          listItem?: "bullet" | "number";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }>;
        materials?: Array<{
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
          };
          media?: unknown;
          title?: string;
          _type: "file";
          _key: string;
        }>;
      }> | null;
    }> | null;
    instructor?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "instructor";
    };
    courseMaterials?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      title?: string;
      _type: "file";
      _key: string;
    }>;
  } | null;
};

// Source: sanity/lib/pages/home/benefits.ts
// Variable: getBenefitsQuery
// Query: *[_type == "benefits" && isActive == true][0] {      _id,      _createdAt,      id,      tagline,      title,      description,      primaryButton,      secondaryButton,      image,      isActive    }
export type GetBenefitsQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  tagline: string | null;
  title: string | null;
  description: string | null;
  primaryButton: {
    text?: string;
    link?: string;
  } | null;
  secondaryButton: {
    text?: string;
    link?: string;
    showIcon?: boolean;
  } | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/cta.ts
// Variable: getCtaQuery
// Query: *[_type == "cta" && isActive == true][0] {    _id,    _createdAt,    id,    title,    description,    primaryButton,    secondaryButton,    image,    isActive  }
export type GetCtaQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  title: string | null;
  description: string | null;
  primaryButton: {
    text?: string;
    link?: string;
  } | null;
  secondaryButton: {
    text?: string;
    link?: string;
  } | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/faq.ts
// Variable: getFaqQuery
// Query: *[_type == "faq" && isActive == true][0] {    _id,    _createdAt,    title,    description,    contactButtonText,    contactButtonLink,    questions,    isActive  }
export type GetFaqQueryResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  contactButtonText: string | null;
  contactButtonLink: string | null;
  questions: Array<{
    question?: string;
    answer?: string;
    _key: string;
  }> | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/features.ts
// Variable: getFeaturesQuery
// Query: *[_type == "features" && isActive == true][0] {      _id,      _createdAt,      id,      header,      leftColumn {        mainSection,        featureBoxes      },      rightColumn {        imageSection,        programsSection      },      isActive    }
export type GetFeaturesQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  header: {
    tagline?: string;
    title?: string;
    description?: string;
  } | null;
  leftColumn: {
    mainSection: {
      tagline?: string;
      title?: string;
      description?: string;
      primaryButtonText?: string;
      primaryButtonLink?: string;
      secondaryButtonText?: string;
      secondaryButtonLink?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    } | null;
    featureBoxes: Array<{
      icon?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      title?: string;
      description?: string;
      buttonText?: string;
      buttonLink?: string;
      _key: string;
    }> | null;
  } | null;
  rightColumn: {
    imageSection: {
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      tagline?: string;
      title?: string;
      description?: string;
      buttonText?: string;
      buttonLink?: string;
    } | null;
    programsSection: {
      tagline?: string;
      title?: string;
      description?: string;
      primaryButtonText?: string;
      primaryButtonLink?: string;
      secondaryButtonText?: string;
      secondaryButtonLink?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    } | null;
  } | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/footer.ts
// Variable: getFooterQuery
// Query: *[_type == "footer" && isActive == true][0] {    _id,    _createdAt,    logo,    logoSvg,    logoLink,    navigationItems,    socialLinks,    copyrightText,    isActive  }
export type GetFooterQueryResult = {
  _id: string;
  _createdAt: string;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  logoSvg: string | null;
  logoLink: string | null;
  navigationItems: Array<{
    label?: string;
    link?: string;
    _key: string;
  }> | null;
  socialLinks: Array<{
    platform?: "discord" | "facebook" | "instagram" | "telegram" | "twitter" | "youtube";
    url?: string;
    _key: string;
  }> | null;
  copyrightText: string | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/header.ts
// Variable: getHeaderQuery
// Query: *[_type == "header" && isActive == true][0] {    _id,    _createdAt,     logo,    logoSvg,    logoLink,    navigationItems,    isActive  }
export type GetHeaderQueryResult = {
  _id: string;
  _createdAt: string;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  logoSvg: string | null;
  logoLink: string | null;
  navigationItems: Array<{
    label?: string;
    link?: string;
    _key: string;
  }> | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/hero.ts
// Variable: getHeroQuery
// Query: *[_type == "hero" && isActive == true][0] {  id,  title,  subtitle,  image,  contentAlignment}
export type GetHeroQueryResult = {
  id: string | null;
  title: string | null;
  subtitle: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  contentAlignment: "left" | "right" | null;
} | null;

// Source: sanity/lib/pages/home/stats.ts
// Variable: getStatsQuery
// Query: *[_type == "stats" && isActive == true][0] {    _id,    _createdAt,    id,    title,    description,    stats,    isActive  }
export type GetStatsQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  title: string | null;
  description: string | null;
  stats: Array<{
    value?: string;
    label?: string;
    _key: string;
  }> | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/testimonials.ts
// Variable: getTestimonialsQuery
// Query: *[_type == "testimonials" && isActive == true][0] {    _id,    _createdAt,    id,    quote,    author,    rating,    isActive  }
export type GetTestimonialsQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  quote: string | null;
  author: {
    name?: string;
    role?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
  rating: number | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/pages/home/transformationGallery.ts
// Variable: getTransformationGalleryQuery
// Query: *[_type == "transformationGallery" && isActive == true][0] {    _id,    _createdAt,    id,    tagline,    title,    subtitle,    ctaButton,    transformations[] {      name,      age,      duration,      weightLoss,      weightUnit,      testimonial,      beforeImage,      afterImage,      rating    },    isActive  }
export type GetTransformationGalleryQueryResult = {
  _id: string;
  _createdAt: string;
  id: string | null;
  tagline: string | null;
  title: string | null;
  subtitle: string | null;
  ctaButton: {
    text?: string;
    link?: string;
  } | null;
  transformations: Array<{
    name: string | null;
    age: number | null;
    duration: string | null;
    weightLoss: number | null;
    weightUnit: "kg" | "lbs" | null;
    testimonial: string | null;
    beforeImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    afterImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
    rating: number | null;
  }> | null;
  isActive: boolean | null;
} | null;

// Source: sanity/lib/student/getEnrolledCourses.ts
// Variable: getEnrolledCoursesQuery
// Query: *[_type == "student" && clerkId == $clerkId][0] {    "enrolledCourses": *[_type == "enrollment" && student._ref == ^._id] {      ...,      "course": course-> {        ...,        "slug": slug.current,        "category": category->{...},        "instructor": instructor->{...}      }    }  }
export type GetEnrolledCoursesQueryResult = {
  enrolledCourses: Array<{
    _id: string;
    _type: "enrollment";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    student?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "student";
    };
    course: {
      _id: string;
      _type: "course";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      title?: string;
      price?: number;
      slug: string | null;
      description?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      category: {
        _id: string;
        _type: "category";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        slug?: Slug;
        description?: string;
        icon?: string;
        color?: string;
      } | null;
      modules?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "module";
      }>;
      instructor: {
        _id: string;
        _type: "instructor";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        name?: string;
        bio?: string;
        photo?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
      } | null;
      courseMaterials?: Array<{
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        title?: string;
        _type: "file";
        _key: string;
      }>;
    } | null;
    amount?: number;
    paymentProvider?: "none" | "stripe" | "wayforpay";
    paymentId?: string;
    enrolledAt?: string;
  }>;
} | null;

// Source: sanity/lib/student/getStudentByClerkId.ts
// Variable: getStudentByClerkIdQuery
// Query: *[_type == "student" && clerkId == $clerkId][0]
export type GetStudentByClerkIdQueryResult = {
  _id: string;
  _type: "student";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  clerkId?: string;
  imageUrl?: string;
} | null;

// Source: sanity/lib/student/isEnrolledInCourse.ts
// Variable: studentQuery
// Query: *[_type == "student" && clerkId == $clerkId][0]._id
export type StudentQueryResult = string | null;
// Variable: enrollmentQuery
// Query: *[_type == "enrollment" && student._ref == $studentId && course._ref == $courseId][0]
export type EnrollmentQueryResult = {
  _id: string;
  _type: "enrollment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  student?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "student";
  };
  course?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "course";
  };
  amount?: number;
  paymentProvider?: "none" | "stripe" | "wayforpay";
  paymentId?: string;
  enrolledAt?: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"course\" && _id == $id][0] {\n      ...,  // Spread all course fields\n      \"category\": category->{...},  // Expand the category reference, including all its fields\n      \"instructor\": instructor->{...},  // Expand the instructor reference, including all its fields\n      \"modules\": modules[]-> {  // Expand the array of module references\n        ...,  // Include all module fields\n        \"lessons\": lessons[]-> {\n          ...,\n          materials[]{ // Also fetch lesson materials if needed for course overview in dashboard\n            _key,\n            title,\n            \"asset\": asset->{url, originalFilename, size, extension, mimeType}\n          }\n        }\n      },\n      courseMaterials[]{ // Fetch course-level materials\n        _key,\n        title,\n        \"asset\": asset->{url, originalFilename, size, extension, mimeType}\n      }\n    }": GetCourseByIdQueryResult;
    "*[_type == \"course\" && slug.current == $slug][0] {\n      ...,\n      \"category\": category->{...},\n      \"instructor\": instructor->{...},\n      \"modules\": modules[]-> {\n        ...,\n        \"lessons\": lessons[]-> {...}\n      }\n    }": GetCourseBySlugQueryResult;
    "*[_type == \"course\"] {\n    ...,\n    \"slug\": slug.current,\n    \"category\": category->{...},\n    \"instructor\": instructor->{...}\n  }": GetCoursesQueryResult;
    "*[_type == \"coursesSection\"][0] {\n    id,\n    header,\n    buttonText,\n    buttonLink\n  }": CoursesSectionQueryResult;
    "*[_type == \"course\" && (\n    title match $term + \"*\" ||\n    description match $term + \"*\" ||\n    category->name match $term + \"*\"\n  )] {\n    ...,\n    \"slug\": slug.current,\n    \"category\": category->{...},\n    \"instructor\": instructor->{...}\n  }": SearchQueryResult;
    "{\n    \"completedLessons\": *[_type == \"lessonCompletion\" && student._ref == $studentId && course._ref == $courseId] {\n      ...,\n      \"lesson\": lesson->{...},\n      \"module\": module->{...}\n    },\n    \"course\": *[_type == \"course\" && _id == $courseId][0] {\n      ...,\n      \"modules\": modules[]-> {\n        ...,\n        \"lessons\": lessons[]-> {...}\n      }\n    }\n  }": ProgressQueryResult | GetCompletionsQueryResult;
    "*[_type == \"lesson\" && _id == $id][0] {\n    ...,\n    \"module\": module->{\n      ...,\n      \"course\": course->{...}\n    },\n    materials[]{ // Fetch the materials array\n      _key,\n      title, \n      \"asset\": asset->{ // Access fields from the referenced asset\n        url,\n        originalFilename,\n        size,\n        extension,\n        mimeType\n      }\n    }\n  }": GetLessonByIdQueryResult;
    "*[_type == \"lessonCompletion\" && student._ref == $studentId && lesson._ref == $lessonId][0] {\n    ...\n  }": CompletionStatusQueryResult;
    "*[_type == \"benefits\" && isActive == true][0] {\n      _id,\n      _createdAt,\n      id,\n      tagline,\n      title,\n      description,\n      primaryButton,\n      secondaryButton,\n      image,\n      isActive\n    }": GetBenefitsQueryResult;
    "*[_type == \"cta\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    id,\n    title,\n    description,\n    primaryButton,\n    secondaryButton,\n    image,\n    isActive\n  }": GetCtaQueryResult;
    "*[_type == \"faq\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    title,\n    description,\n    contactButtonText,\n    contactButtonLink,\n    questions,\n    isActive\n  }": GetFaqQueryResult;
    "*[_type == \"features\" && isActive == true][0] {\n      _id,\n      _createdAt,\n      id,\n      header,\n      leftColumn {\n        mainSection,\n        featureBoxes\n      },\n      rightColumn {\n        imageSection,\n        programsSection\n      },\n      isActive\n    }": GetFeaturesQueryResult;
    "*[_type == \"footer\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    logo,\n    logoSvg,\n    logoLink,\n    navigationItems,\n    socialLinks,\n    copyrightText,\n    isActive\n  }": GetFooterQueryResult;
    "*[_type == \"header\" && isActive == true][0] {\n    _id,\n    _createdAt,\n     logo,\n    logoSvg,\n    logoLink,\n    navigationItems,\n    isActive\n  }": GetHeaderQueryResult;
    "*[_type == \"hero\" && isActive == true][0] {\n  id,\n  title,\n  subtitle,\n  image,\n  contentAlignment\n}": GetHeroQueryResult;
    "*[_type == \"stats\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    id,\n    title,\n    description,\n    stats,\n    isActive\n  }": GetStatsQueryResult;
    "*[_type == \"testimonials\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    id,\n    quote,\n    author,\n    rating,\n    isActive\n  }": GetTestimonialsQueryResult;
    "*[_type == \"transformationGallery\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    id,\n    tagline,\n    title,\n    subtitle,\n    ctaButton,\n    transformations[] {\n      name,\n      age,\n      duration,\n      weightLoss,\n      weightUnit,\n      testimonial,\n      beforeImage,\n      afterImage,\n      rating\n    },\n    isActive\n  }": GetTransformationGalleryQueryResult;
    "*[_type == \"student\" && clerkId == $clerkId][0] {\n    \"enrolledCourses\": *[_type == \"enrollment\" && student._ref == ^._id] {\n      ...,\n      \"course\": course-> {\n        ...,\n        \"slug\": slug.current,\n        \"category\": category->{...},\n        \"instructor\": instructor->{...}\n      }\n    }\n  }": GetEnrolledCoursesQueryResult;
    "*[_type == \"student\" && clerkId == $clerkId][0]": GetStudentByClerkIdQueryResult;
    "*[_type == \"student\" && clerkId == $clerkId][0]._id": StudentQueryResult;
    "*[_type == \"enrollment\" && student._ref == $studentId && course._ref == $courseId][0]": EnrollmentQueryResult;
  }
}
